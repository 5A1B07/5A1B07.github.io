{"id":"2019-12-01-harvest-massive-encounter-unlimited-money","title":"Harvest: Massive Encounter - Unlimited Money Hack","year":"2019","created":"2019-12-01","html":"<h1 id=\"harvest-massive-encounter---unlimited-money-hack\">Harvest: Massive Encounter - Unlimited Money Hack</h1>\n<p><a href=\"https://store.steampowered.com/app/15400/Harvest_Massive_Encounter/\">Harvest: Massive Encounter</a> \nis a simple strategy game where you have to gather minerals which will get turned into money and\ndefend against enemy alien forces.</p>\n<p>The game itself gets repetetive after a few games. \nYou can only build static structures and no units, the enemy does not have a base and will just \nsend units similar to a tower defense game. \nThere are a few different game modes and three different maps, but thats it. \nHowever I bought it at a Steam sale and for its price it was ok.</p>\n<p>One day I decided to practice a bit with <a href=\"https://www.cheatengine.org/\">Cheat Engine</a> and refresh my \nreversing and assembly knowledge, because solving the last CTF challenge of this category as well as\nthe exercises I had to do for university were already a long time ago.</p>\n<p>Cheat Engine is a very powerful tool for analysing an executable and patching code in memory, \nor simply change some memory values of a process.</p>\n<h2 id=\"unlimited-money\">Unlimited Money</h2>\n<p>In most games it is very easy to find certain values and just change the values in memory in order\nto achieve the desired result. At first I thought this was the same here, just find the address at \nwhich the money is stored and set it to a very high value and we are done.</p>\n<p>However, in practice this was not possible.\nWhen the money value is changed it will get immediately overwritten again.\nThis means the real value is stored somewhere else.\nUsing the function &quot;Find out what writes to this address&quot; and then showing the code in the disassembler\nwe can investigate what is going on.</p>\n<p><img src=\"/posts/2019-12-01-harvest-massive-encounter-unlimited-money/ce1.png\" alt=\"tracing write instructions of money address\"></p>\n<p>We see that the value at the address is constantly overwritten.\nLet&#39;s browse the code around this write instruction in the disassembler:</p>\n<p><img src=\"/posts/2019-12-01-harvest-massive-encounter-unlimited-money/ce2.png\" alt=\"disassembly showing where the displayed money value is written\"></p>\n<p>We can see that a function (<code>Harvest.exe+6AB20</code>) gets called and afterwards and the result is written\nto the address where the money is located.\nThe function contains the following instructions:</p>\n<p><img src=\"/posts/2019-12-01-harvest-massive-encounter-unlimited-money/ce3.png\" alt=\"disassembly of the decoding function\"></p>\n<p>By setting a breakpoint (&quot;break and trace instructions&quot;) and analysing the function we can see that, \nafter the <code>xor</code> at <code>Harvest.exe+6AB2C</code>, the value of the money is in the <code>EDI</code> register.\nSo there is some kind of protection like a one time pad which encrypts the value of the money with some\nother value in order to protect it from being manipulated.</p>\n<p>If we manipulate the value of <code>EDI</code> after decryption and before the instruction <code>call Harvest.exe+6AB2C</code> \nat <code>Harvest.exe+6AB2E</code> we can see that this will also change the money, that is displayed in the game UI.\nThe value of <code>EDI</code> gets encrypted and this value is written back into memory.</p>\n<p>However, we cannot modify this function directly, because it is also used\nfor other values like the <em>threat level</em>, which determines the number and strength of enemies that will \nget spawned.</p>\n<p>To bypass this we can just replace the specific call of the encryption function for the money value at \n<code>Harvest.exe+105A2</code> with a call of a custom function.\nIn Cheat Engine we can select the address of the call and go to <code>Tools &gt; Auto assemble &gt; Template &gt; Full Injection</code>.\nThen we copy the code of the original function and insert a simple <code>mov edi,0000270F</code> after the <code>xor</code> which will set\nthe amount of money to 9999 (in decimal base). \nFurthermore the jump (<code>Harvest.exe+6AB3D</code>) inside the function needs to be adapted to also jump inside our \nfunction, otherwise we would jump to a wrong address.</p>\n<p>The full auto assembler script with the injected code looks like this:</p>\n<pre><code class=\"language-x86asm\">{ Game   : Harvest.exe\n<span class=\"hljs-symbol\">  Version:</span> <span class=\"hljs-number\">1.0</span>\n  Date   : <span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">08</span>-<span class=\"hljs-number\">17</span>\n  Author : <span class=\"hljs-number\">7085</span>\n\n  Unlimited/fixed amount of colonial credits.\n}\n\ndefine(address,<span class=\"hljs-string\">\"Harvest.exe\"</span>+105A2)\ndefine(bytes,E8 <span class=\"hljs-number\">79</span> A5 <span class=\"hljs-number\">05</span> <span class=\"hljs-number\">00</span>)\ndefine(money,0000270F)\n\n[ENABLE]\n\nassert(address,bytes)\nalloc(newmem,<span class=\"hljs-number\">$1000</span>)\n\nlabel(code)\nlabel(code2)\nlabel(return)\n<span class=\"hljs-symbol\">\nnewmem:</span>\n<span class=\"hljs-symbol\">\ncode:</span>\n  //<span class=\"hljs-keyword\">call</span> Harvest.exe+6AB20\n  <span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">esi</span>\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">esi</span>,<span class=\"hljs-built_in\">ecx</span>\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">eax</span>,[<span class=\"hljs-built_in\">esi</span>+<span class=\"hljs-number\">04</span>]\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">ecx</span>,[<span class=\"hljs-built_in\">esi</span>+<span class=\"hljs-number\">08</span>]\n  <span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">edi</span>\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">edi</span>,[<span class=\"hljs-built_in\">eax</span>]\n  <span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">edi</span>,[<span class=\"hljs-built_in\">ecx</span>]\n  // change\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">edi</span>,money\n  <span class=\"hljs-keyword\">call</span> Harvest.exe+6A600\n  <span class=\"hljs-keyword\">cdq</span>\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">ecx</span>,<span class=\"hljs-number\">00000005</span>\n  <span class=\"hljs-keyword\">idiv</span> <span class=\"hljs-built_in\">ecx</span>\n  <span class=\"hljs-keyword\">test</span> <span class=\"hljs-built_in\">edx</span>,<span class=\"hljs-built_in\">edx</span>\n  <span class=\"hljs-keyword\">jne</span> code2\n  <span class=\"hljs-keyword\">call</span> Harvest.exe+6A600\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">edx</span>,[<span class=\"hljs-built_in\">esi</span>+<span class=\"hljs-number\">04</span>]\n  <span class=\"hljs-keyword\">mov</span> [<span class=\"hljs-built_in\">edx</span>],<span class=\"hljs-built_in\">eax</span>\n<span class=\"hljs-symbol\">code2:</span>\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">eax</span>,[<span class=\"hljs-built_in\">esi</span>+<span class=\"hljs-number\">04</span>]\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">ecx</span>,[<span class=\"hljs-built_in\">eax</span>]\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">edx</span>,[<span class=\"hljs-built_in\">esi</span>+<span class=\"hljs-number\">08</span>]\n  <span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">ecx</span>,<span class=\"hljs-built_in\">edi</span>\n  <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">eax</span>,<span class=\"hljs-built_in\">edi</span>\n  <span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">edi</span>\n  <span class=\"hljs-keyword\">mov</span> [<span class=\"hljs-built_in\">edx</span>],<span class=\"hljs-built_in\">ecx</span>\n  <span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">esi</span>\n  //<span class=\"hljs-keyword\">ret</span>\n  <span class=\"hljs-keyword\">jmp</span> return\n<span class=\"hljs-symbol\">\naddress:</span>\n  <span class=\"hljs-keyword\">jmp</span> newmem\n<span class=\"hljs-symbol\">return:</span>\n\n[DISABLE]\n<span class=\"hljs-symbol\">\naddress:</span>\n  <span class=\"hljs-built_in\">db</span> bytes\n  // <span class=\"hljs-keyword\">call</span> Harvest.exe+6AB20\n\ndealloc(newmem)</code></pre>\n<p>You can download the script <a href=\"https://raw.githubusercontent.com/7085/7085.github.io/master/posts/2019-12-01-harvest-massive-encounter-unlimited-money/Harvest.CT\">here</a>.</p>\n<p>After activating it we can see that the money will change to 9999 and wont decrease when we build structures.</p>\n<p><img src=\"/posts/2019-12-01-harvest-massive-encounter-unlimited-money/end.png\" alt=\"in-game money value\"></p>\n<p>Note: This was just done for experimenting with Cheat Engine, so the script could be improved or cleaned up more.</p>\n","lastUpdate":""}